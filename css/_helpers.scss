@mixin ligatures {
  -webkit-font-feature-settings:"liga","dlig";
  -moz-font-feature-settings:"liga=1, dlig=1";
  -moz-font-feature-settings:"liga","dlig";
  -ms-font-feature-settings:"liga","dlig";
  -o-font-feature-settings:"liga","dlig";
  font-feature-settings: "liga","dlig";
}

@mixin group {
  &:before, &:after { content: ""; display: table; }
  &:after { clear: both; }
  zoom: 1;
}

@mixin ir {
  display : block;
  overflow : hidden;
  background-repeat : no-repeat;
  text-align : left;
  text-indent : -999em;
  direction : ltr;
  width: 0;
}

@mixin visually-hidden {
  position: absolute;
  margin: -1px;
  padding: 0;
  height: 1px;
  width: 1px;
  overflow: hidden;
  border: 0;
  clip: rect(0 0 0 0);
}

@mixin transition($property, $duration, $ease) {
  -webkit-transition: $property $duration $ease;
  -moz-transition: $property $duration $ease;
  -o-transition: $property $duration $ease;
  transition: $property $duration $ease;
}

// http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
@mixin image-2x-png($image, $width, $height) {
  background-image: url("/assets/#{$image}.png");
  background-repeat: no-repeat;

  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {

    /* on retina, use image that's scaled by 2 */
    background-image: url("/assets/#{$image}@2x.png");
    background-size: $width $height;
  }
}

@mixin image-2x-jpg($image, $width, $height) {
  background: url("/assets/#{$image}.jpg") no-repeat;

  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {

    /* on retina, use image that's scaled by 2 */
    background: url("/assets/#{$image}@2x.jpg") no-repeat;
    background-size: $width $height;
  }
}

/* See http://mrdanadams.com/2012/pixel-ems-css-conversion-sass-mixin/ */

/* Convert PX units to EMs.
Ex: margin-right: pem(16);
*/

@function pem($pxval, $base: 16px) {
  @return #{$pxval / $base}em;
}
@function prem($pxval, $base: 16px) {
  @return #{$pxval / $base}rem;
}

/* Used to convert PX to EMs for multiple properties or values or both.
$base is an optional measurement that allows making measurements relative to the parent font size rather than the current. Also accepts a list of lists (instead a list of values) for properties that accept multiple lists of values. Only numbers of converted; everything else is passed through.

Examples:

@include scale(line-height, 30)
@include scale(line-height, 30, 16)
@include scale(width height, 125);
@include scale(padding, 0 25, 16);
@include scale(text-shadow, (#0d6e28 1 1) (#777 0 0 2), 16);
@include scale(box-shadow, (inset 0 0 0 1 #2a9022) (inset 0 0 3 #459966), 16);
*/
@mixin scale($props, $sizes, $base: $base-font-size) {
    $values: ();
    $sublists: false;
    @each $s in $sizes {
        /* unwrap lists for values that have multiple list of values such as text-shadow */
        @if type-of($s) == list {
            $sublists: true;
            $vv: ();
            @each $ss in $s {
                $vv: append($vv, if(type-of($ss) == number, #{$ss / $base}em, $ss));
            }
            $values: append($values, join((), $vv));
        } @else {
            $values: append($values, if(type-of($s) == number, #{$s / $base}em, $s));
        }
    }
    $value: join((), $values, if($sublists, comma, space));
    @each $prop in $props { #{$prop}: $value }
}